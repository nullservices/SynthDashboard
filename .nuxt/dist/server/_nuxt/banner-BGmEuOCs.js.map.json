{"file":"banner-BGmEuOCs.js","mappings":";;;;;;;;;;;;;;AAeA,MAAK,YAAU;AAAA,EACb,QAAQ;AACA,UAAA,cAAc,IAAI,EAAE;AACpB,UAAA,eAAe,IAAI,EAAE;AAsFpB,WAAA,EAAE,aAAa,aAAa;AAAA,EAAA;AAEvC;;AA1GA,QAAA,OAAAA,eAAAC,WAAA,EACO,OAAM,YADb,MAAA,CAAA,CAAA,kCAAA;AAG4BC,gBAAA,OAAA,aAH5B,CAGkB,WAAM;AAHxB,UAAA,YAAAC,eAIc,OAAO,IAAI,CAAA,+CAAA;AAAA,EAAA;AAJzB,QAAA,iDAAA;MAQ6B,OAAY,cAAA;AARzC,UAAA,sBAAAA,eAQ8C,OAAY,YAAA,CAAA,QAAA;AAAA,EAAA;AAR1D,UAAA,SAAA;AAAA,EAAA;AAAA,QAAA,QAAA;;;;;;;;;","names":["_ssrRenderAttrs","_mergeProps","_ssrRenderList","_ssrInterpolate"],"sources":["../../../../pages/banner.vue"],"sourcesContent":["<template>\r\n  <div class=\"banner\">\r\n    <div class=\"equipment\">\r\n      <div v-for=\"device in midiDevices\" :key=\"device.id\">\r\n        ðŸŽ¹ {{ device.name }}: <span class=\"status\">Connected</span>\r\n      </div>\r\n    </div>\r\n    <canvas id=\"visualizer\"></canvas>\r\n    <div class=\"error\" v-if=\"errorMessage\">{{ errorMessage }}</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { onMounted, ref } from \"vue\";\r\n\r\nexport default {\r\n  setup() {\r\n    const midiDevices = ref([]);\r\n    const errorMessage = ref(\"\");\r\n\r\n    const getMIDIDevices = async () => {\r\n      try {\r\n        const midiAccess = await navigator.requestMIDIAccess();\r\n        const inputs = Array.from(midiAccess.inputs.values());\r\n        midiDevices.value = inputs.map((input) => ({\r\n          id: input.id,\r\n          name: input.name,\r\n        }));\r\n\r\n        midiAccess.onstatechange = () => {\r\n          const updatedInputs = Array.from(midiAccess.inputs.values());\r\n          midiDevices.value = updatedInputs.map((input) => ({\r\n            id: input.id,\r\n            name: input.name,\r\n          }));\r\n        };\r\n      } catch (err) {\r\n        errorMessage.value = \"Failed to access MIDI devices.\";\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    const setupVisualizer = async () => {\r\n  try {\r\n    const canvas = document.getElementById(\"visualizer\");\r\n    const ctx = canvas.getContext(\"2d\");\r\n    canvas.width = window.innerWidth * 0.6;\r\n    canvas.height = 150;\r\n\r\n    console.log(\"Initializing visualizer with default audio input...\");\r\n\r\n    // Request access to the default audio input\r\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n    console.log(\"Audio stream initialized:\", stream);\r\n\r\n    // Create AudioContext and setup analyser\r\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n    if (audioContext.state === \"suspended\") {\r\n      console.log(\"Resuming AudioContext...\");\r\n      await audioContext.resume();\r\n    }\r\n\r\n    const analyser = audioContext.createAnalyser();\r\n    analyser.fftSize = 256;\r\n\r\n    const bufferLength = analyser.frequencyBinCount;\r\n    const dataArray = new Uint8Array(bufferLength);\r\n\r\n    const source = audioContext.createMediaStreamSource(stream);\r\n    source.connect(analyser);\r\n\r\n    console.log(\"Visualizer setup complete. Starting animation...\");\r\n\r\n    const draw = () => {\r\n      analyser.getByteFrequencyData(dataArray);\r\n\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      const barWidth = (canvas.width / bufferLength) * 2.5;\r\n      let barHeight;\r\n      let x = 0;\r\n\r\n      for (let i = 0; i < bufferLength; i++) {\r\n        barHeight = dataArray[i] / 2;\r\n        ctx.fillStyle = `hsl(${(i / bufferLength) * 360}, 100%, 50%)`;\r\n        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\r\n        x += barWidth + 1;\r\n      }\r\n\r\n      requestAnimationFrame(draw);\r\n    };\r\n\r\n    draw();\r\n  } catch (err) {\r\n    console.error(\"Error accessing default audio input:\", err);\r\n  }\r\n};\r\n\r\n\r\n    onMounted(() => {\r\n      getMIDIDevices();\r\n      setupVisualizer();\r\n    });\r\n\r\n    return { midiDevices, errorMessage };\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style>\r\n.banner {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  height: 250px;\r\n  padding: 10px;\r\n  background: linear-gradient(45deg, #111, #1b1b1b);\r\n  border: 5px solid #00ffcc;\r\n  box-shadow: 0 0 20px #00ffcc;\r\n  position: relative;\r\n}\r\n\r\n.equipment {\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  font-size: 1.2em;\r\n  color: #00ffcc;\r\n  width: 100%;\r\n}\r\n\r\n.status {\r\n  color: #00ff00;\r\n}\r\n\r\ncanvas {\r\n  width: 100%;\r\n  height: 150px;\r\n}\r\n\r\n.error {\r\n  color: #ff0066;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"],"version":3}